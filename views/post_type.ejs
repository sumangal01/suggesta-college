<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Profile Page</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" />
  <link rel="stylesheet" href="http://localhost:8000/style.css">

  <style>
    
  </style>
</head>

<body>
    <div class="container">
        <!-- Left Sidebar -->
        <div class="sidebar">
          <div class="logo">
            <img style="height: 46px;" src="./logo.png" alt="Logo">
          </div>
          <div class="profile">
            <a class="links" href="/profile"> 
            <img src="<%= user.profileImageUrl %>" alt="Profile">
            <span><%= user.username %></span>
          </a>
          </div>
          <nav>
            <div class="nav-item"><a class="links" href="/dashboard"><i class="fas fa-home"></i> Home</a></div>
            <div class="nav-item settings-dropdown">
              <div class="dropdown-toggle">
                <i class="fas fa-cog"></i> Settings
              </div>
              <ul class="dropdown-menu">
                <li id="themeToggle">Switch to Light Mode</li>
              </ul>
            </div>
        </nav>
        <div class="nav-item logout">
          <i class="fas fa-user "></i> <a style="text-decoration: none; color: var(--text-color);" href="auth/logout">Logout</a>
        </div>
        </div>
        <div class="posts">
    
          <!-- Main Content -->
          
          
    
          <div id="posts-container"></div>
        </div>
    
        <!-- Right Sidebar -->
        <div class="suggestions">
            <!-- Trending Section -->
            <div class="suggestion-card">
                <a href="/Trending" class="suggestion-link"> <!-- Link to Trending Posts -->
                    <div class="card-content">
                        <h4>Trending üî•</h4>
                        <p>Stay up-to-date with the hottest discussions happening right now. Join the conversation!</p>
                    </div>
                </a>
            </div>
        
            <!-- Post Type Suggestions -->
            <div class="suggestion-card">
                <a href="/Question" class="suggestion-link"> <!-- Link to Question Posts -->
                    <div class="card-content">
                        <h4>Question ‚ùì</h4>
                        <p>Have a question? Ask the community for answers and share your knowledge!</p>
                    </div>
                </a>
            </div>
        
            <div class="suggestion-card">
                <a href="/Feedback" class="suggestion-link"> <!-- Link to Feedback Posts -->
                    <div class="card-content">
                        <h4>Feedback üí¨</h4>
                        <p>Your opinion matters! Share feedback on topics that interest you and help improve the community.</p>
                    </div>
                </a>
            </div>
        
            <div class="suggestion-card">
                <a href="/Announcement" class="suggestion-link"> <!-- Link to Announcement Posts -->
                    <div class="card-content">
                        <h4>Announcement üì¢</h4>
                        <p>Stay informed about important updates and announcements. Don't miss out on the latest news!</p>
                    </div>
                </a>
            </div>
        
            <div class="suggestion-card">
                <a href="/Issue" class="suggestion-link"> <!-- Link to Issue Posts -->
                    <div class="card-content">
                        <h4>Issue ‚ö†Ô∏è</h4>
                        <p>Encountered an issue? Report it and get help from others to resolve it quickly.</p>
                    </div>
                </a>
            </div>
        </div>
      
      </div>

  <script>
    const path = window.location.pathname;  // "/Question"

// Extract the post type (the dynamic part of the URL)
const postType = path.split('/')[1];  // "Question"

console.log(postType);  // "Question"
    const themeToggle = document.getElementById('themeToggle');
    const body = document.body;
    const logo = document.querySelector('img'); // Select the logo element

    themeToggle.addEventListener('click', () => {
      const currentTheme = body.getAttribute('data-theme');
      const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
      body.setAttribute('data-theme', newTheme);

      themeToggle.textContent = newTheme === 'dark' ? 'Switch to Light Mode' : 'Switch to Dark Mode';

      // Change the logo based on the theme
      logo.src = newTheme === 'dark' ? './logo.png' : './logo1.png';

      // Dispatch a custom event to notify other components about the theme change
      const themeChangeEvent = new Event('themeChange');
      document.body.dispatchEvent(themeChangeEvent);
    });

    // Dropdown toggle functionality
    const dropdownToggle = document.querySelector('.dropdown-toggle');
    const dropdownMenu = document.querySelector('.dropdown-menu');

    dropdownToggle.addEventListener('click', () => {
      dropdownMenu.classList.toggle('open');
    });

    // Close the dropdown when clicking outside
    document.addEventListener('click', (e) => {
      if (!dropdownToggle.contains(e.target) && !dropdownMenu.contains(e.target)) {
        dropdownMenu.classList.remove('open');
      }
    });
    ///




    // console.log(otheruser.posts);
    
    const baseUrl = '/posts'; // Base URL for the posts API
    const currentUserId = '<%= user._id %>';
    document.addEventListener('DOMContentLoaded', () => {
      // Fetch and render posts on page load
      fetchPosts();

      // Attach image input and drag-drop listeners
      setupImageUpload();
    });
    async function fetchPosts() {
      try {
        // Ensure `baseUrl` and `otherUserId` are properly set
        const response = await fetch(`${baseUrl}/${postType}`, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${localStorage.getItem('token')}`, // Assuming token is stored in localStorage
          },
        });

        // Check if the response is successful (status code 200-299)
        if (!response.ok) {
          throw new Error(`Error: ${response.statusText}`);
        }

        // Parse the response JSON
        const posts = await response.json();

        // Check if posts data is valid
        if (!Array.isArray(posts)) {
          throw new Error('Invalid data format');
        }

        // Get the container to render posts
        const postsContainer = document.getElementById('posts-container');
        postsContainer.innerHTML = ''; // Clear any previous posts

        // Render each post using the renderPost function
        posts.forEach(renderPost);
      } catch (error) {
        // Log any errors and display an alert or message to the user
        console.error('Error fetching posts:', error);
        const postsContainer = document.getElementById('posts-container');
        postsContainer.innerHTML = `<p class="error-message">Failed to load posts. Please try again later.</p>`;
      }
    }

    function renderPost(post) {
      const postsContainer = document.getElementById('posts-container');
      const postElement = document.createElement('div');
      postElement.classList.add('post');

      const timeAgo = new Date(post.created_at).toLocaleString();
      const contentLimit = 100; // Character limit for the post content
      const isContentLong = post.content.length > contentLimit;
      const truncatedContent = isContentLong ?
        `${post.content.substring(0, contentLimit)}...` :
        post.content;

      postElement.innerHTML = `
        <div class="post-header">
            <div class="post-profile">
                <img src="${post.user_id.profileImageUrl}" alt="Profile">
                <div>
                    <h4>${post.user_id.username}</h4>
                    <small>${timeAgo}</small>
                </div>
            </div>
             <div class="post-category">
            <span class="badge badge-info badge-${post.post_type}"  >${post.post_type}</span>
        </div>
        </div>
        <p class="post-content">${truncatedContent}</p>
        ${isContentLong ? '<button class="btn btn-link show-more">Show More</button>' : ''}
        <div class="post-images">
            ${post.image_url ? `<img src="${post.image_url}" alt="Post Image">` : ''}
        </div>
        <div class="post-footer">
            <button class="btn upvote upvote-btn" data-id="${post._id}" ${post.upvotedBy.includes(currentUserId) ? 'disabled' : ''}>
                <i class="fa fa-thumbs-up fa-lg upvote ${post.upvotedBy.includes(currentUserId) ? 'upvote-active' : ''}" data-id="${post._id}" aria-hidden="true"></i>${post.upvotedBy.length}
            </button>
            <button class="btn downvote downvote-btn" data-id="${post._id}" ${post.downvotedBy.includes(currentUserId) ? 'disabled' : ''}>
                <i class="fa fa-thumbs-down fa-lg downvote ${post.downvotedBy.includes(currentUserId) ? 'downvote-active' : ''}" data-id="${post._id}" aria-hidden="true"></i>${post.downvotedBy.length}
            </button>
            ${post.isOwner ? `<button class="btn btn-danger delete" data-id="${post._id}">Delete</button>` : ''}
        </div>
        <div class="comment-section">
            <textarea class="comment-text" placeholder="Add a comment"></textarea>
            <button class="btn btn-primary add-comment" data-id="${post._id}">Add Comment</button>
            <div class="comments-container">
                ${renderComments(post.comments)}
            </div>
        </div>
    `;

      postsContainer.appendChild(postElement);

      // Handle the "Show More" button to expand content
      const showMoreButton = postElement.querySelector('.show-more');
      if (showMoreButton) {
        showMoreButton.addEventListener('click', () => {
          postElement.querySelector('.post-content').textContent = post.content;
          showMoreButton.style.display = 'none';
        });
      }

      // Event listener for deleting the post
      postElement.querySelector('.delete')?.addEventListener('click', handleDelete);
      postElement.querySelector('.upvote')?.addEventListener('click', handleUpvote);
      postElement.querySelector('.downvote')?.addEventListener('click', handleDownvote);

      // Event listener for adding comments
      postElement.querySelector('.add-comment')?.addEventListener('click', handleAddComment);
    }


    // Render comments
    function renderComments(comments = []) {
      if (comments.length === 0) return '<p class="no-comments">No comments yet.</p>';

      return comments.map(comment => `
        <div class="comment" data-id="${comment._id}">
            <img src="${comment.user_id.profileImageUrl}" alt="Commenter">
            <div class="comment-content">
                <h5 class="comment-user">${comment.user_id.username}</h5>
                <p>${comment.content}</p>
                <small>${new Date(comment.created_at).toLocaleString()}</small>
                ${
                    comment.isOwner 
                    ? `<button class="btn btn-danger delete-comment" data-id="${comment._id}">Delete</button>` 
                    : ''
                }
            </div>
        </div>
    `).join('');
    }
    document.addEventListener('click', event => {
      if (event.target.matches('.delete-comment')) {
        const commentId = event.target.dataset.id;
        handleDeleteComment(commentId);
      }
    });

    // Handle upvote
    async function handleUpvote(event) {
      const postId = event.target.dataset.id;
      try {
        const response = await fetch(`${baseUrl}/upvote/${postId}`, {
          method: 'POST'
        });
        if (!response.ok) throw new Error('Failed to upvote');
        fetchPosts(); // Refresh posts
      } catch (error) {
        console.error(error);
      }
    }

    // Handle downvote
    async function handleDownvote(event) {
      const postId = event.target.dataset.id;
      try {
        const response = await fetch(`${baseUrl}/downvote/${postId}`, {
          method: 'POST'
        });
        if (!response.ok) throw new Error('Failed to downvote');
        fetchPosts(); // Refresh posts
      } catch (error) {
        console.error(error);
      }
    }

    // Handle delete
    async function handleDelete(event) {
      const postId = event.target.dataset.id;
      try {
        const response = await fetch(`${baseUrl}/${postId}`, {
          method: 'DELETE'
        });
        if (!response.ok) throw new Error('Failed to delete post');
        fetchPosts(); // Refresh posts
      } catch (error) {
        console.error(error);
      }
    }

    // Handle add comment
    async function handleAddComment(event) {
      const postId = event.target.dataset.id;
      const commentText = event.target.previousElementSibling.value.trim();

      if (!commentText) {
        alert('Comment cannot be empty');
        return;
      }

      try {
        const response = await fetch(`${baseUrl}/${postId}/comment`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            content: commentText
          }),
        });
        if (!response.ok) throw new Error('Failed to add comment');
        fetchPosts(); // Refresh posts
      } catch (error) {
        console.error(error);
      }
    }
    // hnadle delete comment 
    async function handleDeleteComment(commentId) {
      try {
        const response = await fetch(`${baseUrl}/comment/${commentId}`, {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json',
          },
        });
        if (!response.ok) throw new Error('Failed to delete comment');

        alert('Comment deleted successfully');
        fetchPosts(); // Refresh the UI to reflect the changes
      } catch (error) {
        console.error('Error deleting comment:', error);
        alert('Failed to delete comment');
      }
    }
  </script>
</body>

</html>